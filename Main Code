# üìù Student Registration System - Code Documentation
![Last Updated](https://img.shields.io/badge/Last%20Updated-2025--03--01%2023:35:28%20UTC-blue)
![Author](https://img.shields.io/badge/Author-Soompa911-green)

## üìÇ File Structure
```
src/
‚îî‚îÄ‚îÄ database/
    ‚îî‚îÄ‚îÄ RegistrationForm.java
```

## üíª Source Code

### RegistrationForm.java
```java
package database;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.*;

public class RegistrationForm extends JFrame implements ActionListener {
    // GUI Components
    private JLabel nameLabel, ageLabel, sexLabel, emailLabel, academicLevelLabel, 
            academicProgramLabel, passwordLabel, messageLabel;
    private JTextField nameField, ageField, emailField;
    private JRadioButton maleRadio, femaleRadio;
    private JComboBox<String> academicLevelCombo, academicProgramCombo;
    private JPasswordField adminPassword;
    private JCheckBox consentCheckbox;
    private JButton nextButton, adminButton, passwordButton, backButton, closeButton;
    private int age = -1;
    private String sex = "";
    private ButtonGroup sexGroup;
    private JTable studentTable;
    private Connection connection;

    public RegistrationForm() {
        // Frame Setup
        setTitle("Registration Form");
        setSize(900, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(8, 2));
        setLocationRelativeTo(null);
        
        // Initialize Table
        studentTable = new JTable();
        studentTable.setModel(new DefaultTableModel(
                new Object[][] {},
                new String[] {"Name", "Age", "Sex", "Email Address", 
                             "Academic Level", "Academic Program"}));

        // Setup Components and Database
        addComponents();
        connectToDatabase();
        populateTable();
        setVisible(true);
    }

    private void addComponents() {
        // Name Field
        nameLabel = new JLabel("     Name:");
        add(nameLabel);
        nameField = new JTextField(10);
        add(nameField);

        // Age Field
        ageLabel = new JLabel("     Age:");
        add(ageLabel);
        ageField = new JTextField(10);
        add(ageField);

        // Sex Selection
        sexLabel = new JLabel("     Sex:");
        add(sexLabel);
        maleRadio = new JRadioButton("Male");
        femaleRadio = new JRadioButton("Female");
        sexGroup = new ButtonGroup();
        sexGroup.add(maleRadio);
        sexGroup.add(femaleRadio);
        JPanel sexPanel = new JPanel();
        sexPanel.add(maleRadio);
        sexPanel.add(femaleRadio);
        add(sexPanel);

        // Email Field
        emailLabel = new JLabel("     Email:");
        add(emailLabel);
        emailField = new JTextField();
        add(emailField);

        // Academic Level Selection
        academicLevelLabel = new JLabel("     Academic Level:");
        add(academicLevelLabel);
        String[] academicLevels = {null, "Grade 11", "Grade 12", 
                                  "Under-Graduate Studies", "Graduate Studies"};
        academicLevelCombo = new JComboBox<>(academicLevels);
        academicLevelCombo.addActionListener(this);
        add(academicLevelCombo);

        // Academic Program Selection
        academicProgramLabel = new JLabel("     Academic Program:");
        add(academicProgramLabel);
        String[] gradePrograms = {null, "ICT", "STEM", "ABM", "HUMSS", "GAS"};
        academicProgramCombo = new JComboBox<>(gradePrograms);
        add(academicProgramCombo);

        // Consent Checkbox
        consentCheckbox = new JCheckBox("I consent to register in the school");
        add(consentCheckbox);

        // Buttons
        nextButton = new JButton("NEXT");
        nextButton.addActionListener(this);
        add(nextButton);

        adminButton = new JButton("ADMIN LOG-IN");
        add(adminButton);
        adminButton.addActionListener(e -> showAdminLogin());

        closeButton = new JButton("EXIT");
        closeButton.addActionListener(e -> {
            closeConnection();
            System.exit(0);
        });
        add(closeButton);
    }

    private void showAdminLogin() {
        JFrame passwordFrame = new JFrame();
        passwordFrame.setTitle("ADMIN");
        passwordFrame.setSize(300, 200);
        passwordFrame.setDefaultCloseOperation(HIDE_ON_CLOSE);
        passwordFrame.setLocationRelativeTo(null);
        
        // Admin Login Components
        passwordLabel = new JLabel("Password:");
        messageLabel = new JLabel();
        adminPassword = new JPasswordField(20);
        passwordButton = new JButton("LOG-IN");

        passwordButton.addActionListener(e -> {
            String password = new String(adminPassword.getPassword());
            if (password.equals("password")) {
                showAdminFrame();
                passwordFrame.dispose();
            } else {
                messageLabel.setText("INVALID ADMIN PASSWORD");
            }
        });

        // Back Button
        backButton = new JButton("BACK");
        backButton.addActionListener(e -> passwordFrame.dispose());

        // Layout
        JPanel passwordPane = new JPanel(new FlowLayout());
        passwordPane.add(passwordLabel);
        passwordPane.add(adminPassword);
        passwordPane.add(passwordButton);
        passwordPane.add(backButton);
        passwordPane.add(messageLabel);

        passwordFrame.add(passwordPane);
        passwordFrame.setVisible(true);
        adminButton.setEnabled(false);
    }

    private void showAdminFrame() {
        JFrame adminFrame = new JFrame();
        adminFrame.setTitle("Register Students");
        adminFrame.setSize(900, 400);
        adminFrame.setDefaultCloseOperation(HIDE_ON_CLOSE);
        adminFrame.setLocationRelativeTo(null);

        JButton adminBack = new JButton("BACK");
        adminBack.addActionListener(e -> {
            adminFrame.dispose();
            adminButton.setEnabled(true);
        });

        JPanel adminPanel = new JPanel(new FlowLayout());
        adminPanel.add(adminBack);

        adminFrame.add(adminPanel, BorderLayout.SOUTH);
        adminFrame.add(new JScrollPane(studentTable));
        adminFrame.setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == academicLevelCombo) {
            handleAcademicLevelChange();
        } else if (e.getSource() == nextButton) {
            registerStudent();
        }
    }

    private void handleAcademicLevelChange() {
        String selectedLevel = (String) academicLevelCombo.getSelectedItem();
        String[] programs;
        switch (selectedLevel) {
            case "Grade 11":
            case "Grade 12":
                programs = new String[]{"ICT", "STEM", "ABM", "HUMSS", "GAS"};
                break;
            case "Under-Graduate Studies":
                programs = new String[]{"BSCpE", "BSCE", "BSECE", "BSME", "BSEE", "BSSA"};
                break;
            case "Graduate Studies":
                programs = new String[]{"Master's in CpE", "Master's in CE", 
                                      "Master's in ECE", "Master's in ME", 
                                      "Master's in EE", "Master's in SA"};
                break;
            default:
                programs = new String[]{null};
        }
        academicProgramCombo.setModel(new DefaultComboBoxModel<>(programs));
    }

    private void registerStudent() {
        // Get form data
        String name = nameField.getText();
        String ageString = ageField.getText();
        try {
            age = Integer.parseInt(ageString);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid age.", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        sex = maleRadio.isSelected() ? "Male" : femaleRadio.isSelected() ? "Female" : "";
        String email = emailField.getText();
        String academicLevel = (String) academicLevelCombo.getSelectedItem();
        String academicProgram = (String) academicProgramCombo.getSelectedItem();
        boolean consent = consentCheckbox.isSelected();

        // Validation
        if (name.isEmpty() || ageString.isEmpty() || email.isEmpty() || 
            academicLevel == null || academicProgram == null || !consent) {
            JOptionPane.showMessageDialog(this, 
                "Please fill out all required fields and consent to register in the school.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirmation dialog
        int confirmation = JOptionPane.showConfirmDialog(this, 
            "Please confirm your details:\n" +
            "Name: " + name + "\n" +
            "Age: " + ageString + "\n" +
            "Sex: " + sex + "\n" +
            "Email: " + email + "\n" +
            "Academic Level: " + academicLevel + "\n" +
            "Academic Program: " + academicProgram,
            "Confirm Registration", JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            // Database registration
            try {
                String sql = "INSERT INTO students (name, age, sex, email, academic_level, academic_program) " +
                           "VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmt = connection.prepareStatement(sql);
                pstmt.setString(1, name);
                pstmt.setInt(2, age);
                pstmt.setString(3, sex);
                pstmt.setString(4, email);
                pstmt.setString(5, academicLevel);
                pstmt.setString(6, academicProgram);
                pstmt.executeUpdate();

                populateTable();
                JOptionPane.showMessageDialog(this, 
                    "You have successfully registered in this School");

                clearFields();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, 
                    "Error registering student: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Registration canceled.");
        }
    }

    private void clearFields() {
        nameField.setText("");
        ageField.setText("");
        emailField.setText("");
        sexGroup.clearSelection();
        academicLevelCombo.setSelectedIndex(0);
        academicProgramCombo.setModel(new DefaultComboBoxModel<>(new String[]{null}));
        consentCheckbox.setSelected(false);
    }

    private void connectToDatabase() {
        try {
            String url = "jdbc:postgresql://public.johnpaul:5432/postgres";
            String username = "postgres";
            String password = "johnpaul";
            connection = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error connecting to the database: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
        model.setRowCount(0); // Clear existing data

        try {
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM students");
            while (rs.next()) {
                String name = rs.getString("name");
                int age = rs.getInt("age");
                String sex = rs.getString("sex");
                String email = rs.getString("email");
                String academicLevel = rs.getString("academic_level");
                String academicProgram = rs.getString("academic_program");

                model.addRow(new Object[]{name, age, sex, email, 
                                        academicLevel, academicProgram});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error retrieving student data: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(RegistrationForm::new);
    }
}
```

## üîç Code Structure Breakdown

### 1. Class Components
- **Main Class**: `RegistrationForm` extends `JFrame` and implements `ActionListener`
- **GUI Components**: Various Swing components for user interface
- **Database Connection**: PostgreSQL connection management

### 2. Key Methods

#### GUI Methods
- `addComponents()`: Sets up all GUI elements
- `showAdminLogin()`: Creates admin login dialog
- `showAdminFrame()`: Displays admin dashboard
- `handleAcademicLevelChange()`: Updates program options based on academic level

#### Database Methods
- `connectToDatabase()`: Establishes database connection
- `populateTable()`: Loads student data into table
- `closeConnection()`: Safely closes database connection

#### Business Logic
- `registerStudent()`: Handles student registration process
- `clearFields()`: Resets form after successful registration

### 3. Features Implementation

#### Academic Programs
```java
switch (selectedLevel) {
    case "Grade 11":
    case "Grade 12":
        programs = new String[]{"ICT", "STEM", "ABM", "HUMSS", "GAS"};
        break;
    case "Under-Graduate Studies":
        programs = new String[]{"BSCpE", "BSCE", "BSECE", "BSME", "BSEE", "BSSA"};
        break;
    case "Graduate Studies":
        programs = new String[]{"Master's in CpE", "Master's in CE", 
                              "Master's in ECE", "Master's in ME", 
                              "Master's in EE", "Master's in SA"};
        break;
}
```

#### Database Schema
```sql
CREATE TABLE students (
    name VARCHAR(100),
    age INTEGER,
    sex VARCHAR(10),
    email VARCHAR(100),
    academic_level VARCHAR(50),
    academic_program VARCHAR(50)
);
```

## üìù Notes
- The code uses a simple password authentication system that should be enhanced for production
- Database credentials are hardcoded and should be moved to a configuration file
- Input validation could be strengthened
- Consider adding logging for better debugging

---

<div align="center">

**Documentation Generated: 2025-03-01 23:35:28 UTC**  
**Author: [Soompa911](https://github.com/Soompa911)**

</div>
